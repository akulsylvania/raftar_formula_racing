import threading
import time
import serial.tools.list_ports
import numpy as np
import pandas as pd
import customtkinter as ctk
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.animation import FuncAnimation
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
from itertools import count
import random

line=''
mainframe=pd.DataFrame(columns=['A', 'B','C'])

#basics for gui existence
root=ctk.CTk()
root.geometry("1024x720")
root.title("RafTrack vPro")
root.resizable(False,False)
rfr_green='#30ff00'


# region frames
#definitions for frames

#frame vairables:
bdr_width=0.26
bdr_color='grey'

#main frames
menu_frame=ctk.CTkFrame(root, width=1024, height=200, border_color=bdr_color, border_width=bdr_width)
plot_frame=ctk.CTkFrame(root, width=1024, height=520, border_color=bdr_color, border_width=bdr_width)
plot_frame.grid(row=1, column=0)
menu_frame.grid(row=0, column=0)

#subframes

#menu subframes
serial_frame=ctk.CTkFrame(menu_frame, width=1024, height=25, border_color=bdr_color, border_width=bdr_width)
interact_frame=ctk.CTkFrame(menu_frame, width=1024, height=175, border_color=bdr_color, border_width=bdr_width)
serial_frame.grid(row=0, column=0)
interact_frame.grid(row=1, column=0)

#plot subframes
plt1_frame=ctk.CTkFrame(plot_frame, width=512, height=260, border_color=bdr_color, border_width=bdr_width)
plt2_frame=ctk.CTkFrame(plot_frame, width=512, height=260, border_color=bdr_color, border_width=bdr_width)
plt3_frame=ctk.CTkFrame(plot_frame, width=512, height=260, border_color=bdr_color, border_width=bdr_width)
plt4_frame=ctk.CTkFrame(plot_frame, width=512, height=260, border_color=bdr_color, border_width=bdr_width)

plt1_frame.grid(row=0, column=0)
plt2_frame.grid(row=1, column=0)
plt3_frame.grid(row=0, column=1)
plt4_frame.grid(row=1, column=1)

#endframe config
# endregion_config


#serial label
serial_label=ctk.CTkLabel(serial_frame, text="test",
                          width=1024, height=25,
                          fg_color='black', text_color=rfr_green)

serial_label.grid(row=0, column=0)

def update_serial(line):
    serial_label.configure(text=line)


update_serial_thread=threading.Thread(target=update_serial)
update_serial_thread.daemon=True
update_serial_thread.start()



# region Serial communication stuff
#serial comm
ser = None
ser_flag=False


def store_serial():
    global ser, ser_flag, line

    serial_thread_start_chk=False
    while True:
        if ser_flag:
            try:
                line = ser.readline().decode('utf-8').strip()
                '''if(len(line)>0 & serial_thread_start_chk==False):
                    update_serial_thread.start()
                    serial_thread_start_chk=True
                    update_serial(line)'''
                if(len(line)>0):
                    update_serial(line)

                root.update_idletasks()
            except serial.SerialException as e:
                #update_serial(f"Error: {e}")
                ser_flag = False

def connect_serial():
    global ser, ser_flag
    serial_txt = 'Refreshing'
    ports = list(serial.tools.list_ports.comports())
    arduino_port = None


    for port in ports:
        if "Arduino" in port.description:
            arduino_port = port.device
            break

    if arduino_port:
        serial_txt = f"RafTrack vPro found on {arduino_port}"
        baud_rate = 9600
        try:
            ser = serial.Serial(arduino_port, baud_rate)
            serial_txt = f"Connected to RafTrack vPro on {ser.name}"
            ser_flag = True


        except serial.SerialException as e:
            serial_txt = f"Error: {e}"
            ser_flag = False

    else:
        serial_txt = "RafTrack vPro not found. Please make sure your device is connected."
        ser_flag = False

    update_serial(serial_txt)


# Connect to serial port in a thread
serial_thread = threading.Thread(target=connect_serial)
serial_thread.daemon = True
serial_thread.start()

# Start the store_serial function in the background
store_serial_thread = threading.Thread(target=store_serial)
store_serial_thread.daemon = True
store_serial_thread.start()
# endregion


def logdataframe():
    global line, mainframe
    #newline=pd.DataFrame(['A': int(line[0:3])
    #mainframe=pd.concat([mainframe,line ])


#refresh button

def refresh_button_clicked():
    global ser_flag
    ser_flag = False
    refresh_thread = threading.Thread(target=connect_serial)
    refresh_thread.start()


refresh_button = ctk.CTkButton(interact_frame, text="Refresh",text_color='black',
                               fg_color=rfr_green, hover_color='gray',
                               command=refresh_button_clicked)

refresh_button.grid(row=0, column=0)


'''
#plotting stuff



# Initialize data storage
x_vals = []
y_vals = []

fig,ax=plt.subplots()
plt.xlim([0,100])
plt.ylim([0,100])
lnall,=ax.plot([],[],'ro-')


def animate(frame):
    global line
    if len(line) > 0:
        x_vals.append(float(line[0:2]))
        y_vals.append(float(line[2:4]))
        lnall.set_data(x_vals, y_vals)


# Create the animation
ani = FuncAnimation(plt.gcf(), animate, interval=100, frames=1000, repeat=True)

def call_ani():
    ani

ani_thread = threading.Thread(target=call_ani)
ani_thread.daemon = True
ani_thread.start()

# Start the animation
plt.tight_layout()
plt.show()
'''

x_vals=[]
y_vals1=[]
index=count()

figId = plt.figure()
canvas = FigureCanvasTkAgg(figId, master=plt1_frame)
canvas.get_tk_widget().pack()
canvas.draw()

def animate(i):
    x_vals.append(line[0:2])
    y_vals1.append(line[2:4])
    plt.cla()
    plt.plot(x_vals, y_vals1)

ani = FuncAnimation(plt.gcf(), animate, interval=100)



root.mainloop()

